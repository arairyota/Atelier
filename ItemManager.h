/*****************************************************************************
ItemManager.h
ItemManager.h
name	:新井 崚太
data	:2019/08/14 18:29:57
*****************************************************************************/
#ifndef ItemManager_H
#define ItemManager_H

//////////////////////////////////////////////////////////////////////////////
//ヘッダーファイルインクルード
//////////////////////////////////////////////////////////////////////////////
#include "ItemBase.h"

//////////////////////////////////////////////////////////////////////////////
//define定義
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//enum定義
//////////////////////////////////////////////////////////////////////////////
enum ITEM_INDEX {
	ITEM_ORIBOMD,

	ITEM_MAX
};

//////////////////////////////////////////////////////////////////////////////
//前方宣言
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//ItemManagerクラス
//////////////////////////////////////////////////////////////////////////////
class ItemManager {
private:
	static ItemManager* _instance;
	std::vector<ItemBase*>_itemList;

public:
	static void Create() {
		if (_instance == nullptr) {
			_instance = new ItemManager;
		}
	}

	static void Delete() {
		if (_instance != nullptr) {
			delete _instance;
			_instance = nullptr;
		}
	}

	static auto GetInstance() {
		if (_instance != nullptr) {
			return _instance;
		}
	}

	bool AllLoad();
	void AllUnLoad();

	ItemBase* GetItem(ITEM_INDEX index);

	template<typename T>
	auto* AddItem() {
		T* item = new T();
		return item;
	};

	auto GetItemList() {
		return _itemList;
	};

protected:

};

#endif // !ItemManager_H

//void Init();
//void Uninit();
//void Update();
//void Draw();
